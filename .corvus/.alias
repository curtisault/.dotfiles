# Import to $HOME/.zshrc:
# if [ -f $HOME/.alias ]; then
#     source $HOME/.alias
# else
#     print "404: $HOME/.alias not found."
# fi

# Create local .secrets for holding user/pass values
# import here

if [ -f $HOME/.secrets ]; then
    source $HOME/.secrets
else
    print "${Light_Red}404: $HOME/.secrets not found.${NO_COLOR}"
fi

# functions import

if [ -f $HOME/.functions ]; then
    source $HOME/.functions
else
    print "${Light_Red}404: $HOME/.functions not found.${NO_COLOR}"
fi

# emojis import

if [ -f $HOME/.emojis ]; then
    source $HOME/.emojis
else
    print "${Light_Red}404: $HOME/.emojis not found.${NO_COLOR}"
fi



# Dependencies: 
#   Languages:  elm, elixir 
#   Databases:  postgres
#   Editors:    emacs, neovim
#   Terminal:   bat, exa, neovim, fzf

alias l=$LS
alias rtwh=$RECOMPILE_THE_WHOLE_ENCHILADA
alias cc=$COMPILE_CROWBAR
alias rc=$RUN_CROWBAR_STAGING_DB
alias reinstall_deps=$REINSTALL_CROWBAR_DEPS
alias rc_local=$RUN_CROWBAR_LOCAL_DB
alias precommit='.git/hooks/pre-commit'
alias yw='yarn watch'
alias p='python3'
alias n='nvim'
alias h='history | fzf --tac'
alias e='emacs -nw'
alias sz="source $HOME/.zshrc"
alias pg_set_local=$PG_SET_LOCAL_ENV
alias pg_set_staging=$PG_SET_STAGING_ENV
alias beaminfo='pidinfo beam'
alias killbeam='pidkill beam'
alias tshark_http_head=$TSHARK_HTTP_HEAD
alias info_and_versions="echo 'OS: $OSTYPE' && echo 'elmLS: $(elm-language-server -v)' && echo node: $(node -v)''"

CROWBAR_PROJ_DIR=$HOME/Projects/crowbar
LAPTOP_PROJ_DIR=$HOME/Projects/laptop

# complex commands
RUN_CROWBAR_STAGING_DB='MIX_DB=staging iex -S mix phx.server'
RUN_CROWBAR_LOCAL_DB='iex -S mix phx.server'

REINSTALL_CROWBAR_DEPS="cd $LAPTOP_PROJ_DIR && \
    git pull && \
    asdf install && \
    ./elm.zsh"

RECOMPILE_THE_WHOLE_ENCHILADA="fancy_echo "${RADIOACTIVE}${RADIOACTIVE}${RADIOACTIVE} Recompiling the whole enhilada\n" && \
    cd $CROWBAR_PROJ_DIR && \
    yarn cache clean && \
    yarn && \
    mix do clean, deps.get && \
    mix compile --warnings-as-errors && \
    mix graphql && \
    MIX_ENV=test mix ecto.drop, ecto.create, ecto.migrate && \
    docker-compose kill && \
    docker-compose up -d"

COMPILE_CROWBAR="yarn && \
    mix do clean, deps.get && \
    mix compile --warnings-as-errors && \
    mix graphql"

PG_SET_LOCAL_ENV="fancy_echo '${WAFFLE}${WAFFLE}${WAFFLE} Setting Postgres Local Env...\n' && \
    export PGHOST=${LOCAL_PG_HOST}; \
    export PGUSER=${LOCAL_PG_USER}; \
    export PGPASSWORD=${LOCAL_PG_PASSWORD};"

PG_SET_STAGING_ENV="fancy_echo '${WAFFLE}${WAFFLE}${WAFFLE} Setting Postgres Staging Env...\n' && \
    export PGHOST=${STAGING_PG_HOST}; \
    export PGUSER=${STAGING_PG_USER}; \
    export PGPASSWORD=${STAGING_PG_PASSWORD};"

LS='exa -F -l -a --group-directories-first --colour-scale'

TSHARK_HTTP_HEAD='tshark \
    -Y "http.request.method == \"GET\" or \
        http.request.method == \"POST\" or \
        http.request.method == \"PUT\" or \
        http.request.method == \"DELETE\"" \
    -T fields \
        -e http.request.method \
        -e http.request.version \
        -e http.request.uri \
    | head -n 1'


# funcs
pidkill() { kill -9 $(pgrep $1) }
pidinfo() { ps -p $(pgrep $1) }



# colors (ANSI escape codes)
NO_COLOR='\033[0m'
Black='\033[0;30m'
Dark_Gray='\033[1;30m'
Red='\033[0;31m'
Light_Red='\033[1;31m'
Green='\033[0;32m'
Light_Green='\033[1;32m'
Brown_Orange='\033[0;33m'
Yellow='\033[1;33m'
Blue='\033[0;34m'
Light_Blue='\033[1;34m'
Purple='\033[0;35m'
Light_Purple='\033[1;35m'
Cyan='\033[0;36m'
Light_Cyan='\033[1;36m'
Light_Gray='\033[0;37m'
White='\033[1;37m'

