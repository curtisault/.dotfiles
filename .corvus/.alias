# Import to $HOME/.zshrc:
# if [ -f $HOME/.alias ]; then
#     source $HOME/.alias
# else
#     print "404: $HOME/.alias not found."
# fi

# Create local .secrets for holding user/pass values
# import here

if [ -f $HOME/.secrets ]; then
    source $HOME/.secrets
else
    print "${Light_Red}404: $HOME/.secrets not found.${NO_COLOR}"
fi

# functions import

if [ -f $HOME/.functions ]; then
    source $HOME/.functions
else
    print "${Light_Red}404: $HOME/.functions not found.${NO_COLOR}"
fi

# emojis import

if [ -f $HOME/.emojis ]; then
    source $HOME/.emojis
else
    print "${Light_Red}404: $HOME/.emojis not found.${NO_COLOR}"
fi

alias l=$LS
alias rtwe=$RECOMPILE_THE_WHOLE_ENCHILADA
alias cc=$COMPILE_CROWBAR
alias rc=$RUN_CROWBAR_LOCAL_DB
alias er=$ELM_REVIEW
alias reinstall_deps=$REINSTALL_CROWBAR_DEPS
alias rc_staging=$RUN_CROWBAR_STAGING_DB
alias reset_crowbar_test=$DROP_AND_RE_TEST
alias restart_docker=$RESTART_DOCKER
alias precommit='.git/hooks/pre-commit'
alias yw='yarn watch'
alias p='python3'
alias n='nvim'
alias h='history | fzf --tac'
alias e='emacs -nw'
alias sz="source $HOME/.zshrc"
alias glp=$GIT_LOG_PRETTY
alias pg_set_local=$PG_SET_LOCAL_ENV
alias psql_crowbar_staging='psql_staging_connect crowbar-db'
alias psql_scan_staging='psql_staging_connect scan-db'
alias beaminfo='pidinfo beam'
alias killbeam='pidkill beam'
# alias info_and_versions="echo 'OS: $OSTYPE' && echo 'elmLS: $(elm-language-server -v)' && echo 'node: $(node -v)' && echo '$(elixir -v)'"

CROWBAR_PROJ_DIR=$HOME/Projects/crowbar
LAPTOP_PROJ_DIR=$HOME/Projects/laptop

# complex commands
RUN_CROWBAR_STAGING_DB='MIX_DB=staging iex -S mix phx.server'
RUN_CROWBAR_LOCAL_DB='iex -S mix phx.server'

ELM_REVIEW="elm-review"

RESTART_DOCKER="docker-compose kill && docker-compose up -d"

REINSTALL_CROWBAR_DEPS="cd $LAPTOP_PROJ_DIR && \
    git pull && \
    asdf install && \
    ./elm.zsh"

RECOMPILE_THE_WHOLE_ENCHILADA="fancy_echo '${RADIOACTIVE}${RADIOACTIVE}${RADIOACTIVE} Recompiling the whole enhilada\n' && \
    cd $CROWBAR_PROJ_DIR && \
    rm -rf assets/node_modules && \
    rm -rf assets/elm-stuff && \
    yarn cache clean && \
    yarn && \
    mix do clean, deps.get && \
    mix format && \
    mix lint && \
    mix i18n_to_elm && \
    mix compile --warnings-as-errors && \
    mix graphql && \
    MIX_ENV=test mix ecto.drop, ecto.create, ecto.migrate && \
    docker-compose kill && \
    docker-compose up -d"

COMPILE_CROWBAR="yarn && \
    mix do clean, deps.get && \
    mix format && \
    mix lint && \
    mix i18n_to_elm && \
    mix compile --warnings-as-errors && \
    mix graphql"

PG_SET_LOCAL_ENV="fancy_echo '${WAFFLE}${WAFFLE}${WAFFLE} Setting Postgres Local Env...\n' && \
    export PGHOST=${LOCAL_PG_HOST}; \
    export PGUSER=${LOCAL_PG_USER}; \
    export PGPASSWORD=${LOCAL_PG_PASSWORD};"

GIT_LOG_PRETTY="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --all"

DROP_AND_RE_TEST="MIX_ENV=test \
    mix do ecto.drop --quiet, \
    ecto.create --quiet, \
    ecto.migrate --quiet && \
    mix test"

LS="exa -F -l -a --group-directories-first --colour-scale"

# funcs
pidkill() { kill -9 $(pgrep $1) }
pidinfo() { ps -p $(pgrep $1) }

ggb() {
    git grep -E -n $1 | while IFS=: read i j k; do git blame -L $j,$j $i | cat; done
}

psql_staging_connect() {
    psql $(\
        aws secretsmanager get-secret-value --secret-id user_crowbar/$1/postgres/dev-and-support |\
        jq -r ".SecretString" |\
        jq ".primary_uri" --raw-output \
        )
}


# colors (ANSI escape codes)
NO_COLOR='\033[0m'
Black='\033[0;30m'
Dark_Gray='\033[1;30m'
Red='\033[0;31m'
Light_Red='\033[1;31m'
Green='\033[0;32m'
Light_Green='\033[1;32m'
Brown_Orange='\033[0;33m'
Yellow='\033[1;33m'
Blue='\033[0;34m'
Light_Blue='\033[1;34m'
Purple='\033[0;35m'
Light_Purple='\033[1;35m'
Cyan='\033[0;36m'
Light_Cyan='\033[1;36m'
Light_Gray='\033[0;37m'
White='\033[1;37m'
